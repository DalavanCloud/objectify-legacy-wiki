#summary Using Objectify with Google Web Toolkit

== Got CRUD? ==

This must be _the_ most common "design pattern" when developing web applications:

  # Load some data from the datastore
  # Pass this data to the presentation tier via RPC
  # Render the data to the user

However, there is often an impedance mismatch between the data tier and the presentation tier in web development tools.  Because, for example, Hibernate or JDO proxies cannot be passed through GWT RPC, developers are often forced to construct Data Transfer Objects to shuffle data back and forth.  Sometimes this is a good idea (say, when you have sophisticated program logic in your entities) but sometimes this is a laborious pain in the arse.

== No More DTOs ==

With a tiny amount of care, your *entity objects* can be passed through GWT serialization and used as-is in the presentation layer.  Simply write your entity as if it is a GWT client class!

  * Make sure your entity classes are part of your GWT module (typically in a .client package).
  * Don't call methods which are not part of the JRE emulation.
  * All referenced classes must themselves be GWT-safe.

Simply add this to your module.gwt.xml:

{{{
    <inherits name="com.googlecode.objectify.Objectify" />
}}}

You can now manipulate your entity objects in GWT and seamlessly pass them back and forth to the server through GWT-RPC.  Objectify enables you to use Key<?>, Key (the datastore version), and all the datastore basic types (Link, Email, GeoPt, etc) in your client code.

== Annotations ==

In general GWT will ignore annotation on your classes. It is not necessary to include them in your gwt include modules.
 
Annotations like {{{@Entity}}}, {{{@AlsoLoad}}}, and the like will be ignored during GWT serialization. 

== Client-Side Access ==

None of the Objectify action objects (Objectify, ObjectifyService, ObjectifyFactory, etc) can be used from GWT client code. Basically only entities and their associated data (types) are allowed to cross the GWT service boundaries.

Note:  Creating {{{Key<?>}}} objects client-side is difficult.  You can only useÂ one constructor, the one which takes a native datastore {{{Key}}}.  The other constructors do not exist in the {{{Key<?>}}} super-source.  See [https://groups.google.com/group/objectify-appengine/browse_thread/thread/5d6171c6a4956719/2d5004df1d7e20ee?hl=en_US&lnk=gst&q=polymorphism+gwt&pli=1#2d5004df1d7e20ee this discussion].

== Example ==

A *very* simple example can be found [http://code.google.com/p/scratchmonkey/source/browse/#svn/appengine/objectify-gwt here].

== Request Factory==

David Chandler wrote an article on [http://turbomanage.wordpress.com/2011/03/25/using-gwt-requestfactory-with-objectify/ Using Objectify with RequestFactory].