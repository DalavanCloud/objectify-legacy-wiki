#summary Introduction to Objectify

Objectify is a Java data access API specifically designed for the Google App Engine datastore.  It's goals are to:

  * Be easy to learn and understand.
  * Support all native datastore features in an intuitive, human-friendly way.
  * Model sophisticated, strongly-typed, polymorphic data structures.
  * Enable convenient, almost EJB-like transactional logic.
  * Increase performance and decrease cost through smart, transaction-aware caching.
  * Allow major schema migrations "in-place" with zero downtime.
  * Seamlessly coexist with other datastore tools: the Java Low-Level API, JDO/JPA, Twig, Go, Python DB and NDB.

Objectify provides a level of abstraction that is high enough to be convenient, but low enough not to obscure the key/value nature of the datastore.  It is intended to be a Goldilocks API - not too low level, not too high level, just right.

= Overview =

This is a quick tour of what using Objectify looks like, intended to give you a taste of the framework.  Full explanations can be found later in the documentation.

== Defining Entities ==

A simple entity:

{{{
import com.googlecode.objectify.annotation.Entity;
import com.googlecode.objectify.annotation.Id;

@Entity;
public class Car {
    @Id Long id;
    String vin;
    int color;
}
}}}

Somewhat more complicated:

{{{
import com.googlecode.objectify.annotation.AlsoLoad;
import com.googlecode.objectify.annotation.Cache;
import com.googlecode.objectify.annotation.Entity;
import com.googlecode.objectify.annotation.Id;
import com.googlecode.objectify.annotation.IgnoreSave;
import com.googlecode.objectify.annotation.Index;
import com.googlecode.objectify.annotation.Load;
import com.googlecode.objectify.annotation.OnLoad;

@Entity
@Cache
public class Car {
    @Id Long id;
    @Load List<Person> owners = new ArrayList<Person>();
    @Index String vin;
    @AlsoLoad("colour") int color;
    @IgnoreSave boolean special;

    @OnLoad public void onLoad() {
        if (special)
            color = 0xffffff;
    }
}
}}}

== Basic Operations ==

{{{
import static com.googlecode.objectify.ObjectifyService.ofy;

Car porsche = new Car("2FAST", RED);
ofy().save().entity(porsche).now();    // async without the now()

assert porsche.id != null;    // id was autogenerated

// Get it back
Ref<Car> ref = ofy().load().key(Key.create(Car.class, porsche.id));  // Ref is async
Car fetched1 = ref.get();    // Materialize the async value

// More likely this is what you will type
Car fetched2 = ofy().load().type(Car.class).id(porsche.id).get();

// Or you can issue a query
Car fetched3 = ofy().load().type(Car.class).filter("vin", "2FAST").first().get();

// Change some data and write it
porsche.color = BLUE;
ofy().save().entity(porsche).now();    // async without the now()

// Delete it
ofy.delete().entity(porsche).now();    // async without the now()
}}}
