#summary The annotations used by Objectify

= Example =
{{{
@Cached(expirationSeconds=600)
@Entity(name="Emp")
@Indexed // or @Unindexed sets default for fields in class; if neither specified, assume @Indexed
class Employee {
   @Id long id;
   @Parent Key<Company> employer;

   @Unindexed int vacationDays;

   // field getting renamed
   @AlsoLoad("boss") Key<Employee> manager;

   String firstName;
   String lastName;

   // we used to store fullName, now we store first and last separately
   public void oldWay(@AlsoLoad("fullName") String fullName)
   {
       String[] split = fullName.split(" ");
       firstName = split[0];
       lastName = split[1];
   }

   static class Office {
      String building;
      String room;
   }

   // Allows you to query for employess in a building by filtering on "offices.building"
   @Embedded Office[] offices;

   // Whatever gets put here will be serialized out and back (and cannot be filtered)
   @Seralized Object misc;

   @PostLoad void onLoad() { /* do something after load */ }
   @PrePersist void onPersist() { /* do something before persisting */ }
}
}}}

= The Annotations =

== @javax.persistence.Entity ==
  * Optional, can be placed on a class.
  * Optionally specifies the name of a kind, ie {{{@Entity(name="Person")}}}

== @com.googlecode.objectify.annotation.Entity ==
  * An alternate annotation that behaves the same as javax.persistence.Entity.
  * Won't be recognized by any classpath scanning tools that look for the other annotation.

== @javax.persistence.Id ==
  * Must be placed on one and only one field of an @Entity class
  * Field must be type {{{Long}}}, {{{long}}}, or {{{String}}}
  * If used on type {{{Long}}}, null values will be autogenerated on put()

== @com.googlecode.objectify.annotation.Indexed ==
  * Placed on a field or class.
  * When placed on a class, sets the default state for all fields of the class.
  * Can take {{{If}}} conditions which allow partial indexing.
  * @Indexed state is inherited by embedded classes and their fields, but can be overriden with @Unindexed.
  * Indexed fields cost more space and cpu time to store, but can be queried on.
  * Translates to {{{Entity.setProperty()}}} at the low-level api.
  * Unless otherwise specified, all classes default to @Indexed.

== @com.googlecode.objectify.annotation.Unindexed ==
  * Placed on a field or class.
  * When placed on a class, sets the default state for all fields of the class.
  * Can take {{{If}}} conditions which allow partial indexing.
  * @Unindexed state is inherited by embedded classes and their fields, but can be overridden with @Indexed.
  * Unindexed fields consume less space and require less cpu time to store, but cannot be queried for.
  * Translates to {{{Entity.setUnindexedProperty()}}} at the low-level api.

== @com.googlecode.objectify.annotation.AlsoLoad ==
  * Placed on a field or the single parameter to a method
  * Requires one value, the name of a property in the datastore to load into the field.
  * Example:  {{{@AlsoLoad("whatThisFieldUsedToBeCalled")}}}
  * Causes the field to be loaded from an alternate name in the underlying datastore
  * If placed on the parameter to a method that takes a single parameter, the method will be called with the datastore value
  * If there is a load conflict with the true name of field, an IllegalStateException will be thrown.

== @com.googlecode.objectify.annotation.Parent ==
  * Placed on at most one field of type {{{Key}}}
  * Defines the entity group parent for an entity

== @com.googlecode.objectify.annotation.Cached ==
  * Placed on an entity class
  * Stores entity data in a write-through cache for faster read performance
  * Allows you to specify the expiration of entities in the cache

== @javax.persistence.Embedded ==
  * Placed on an entity field, or the field of any class embedded in an entity.
  * Field can be any custom type or a collection or array of your custom type.
  * See the [http://code.google.com/p/objectify-appengine/wiki/IntroductionToObjectify#@Embedded @Embedded] documentation.

== @com.googlecode.objectify.annotation.Serialized ==
  * Placed on any entity field of Serializable type
  * Causes the object graph at that point to be stored as a serialized Blob.
  * Can be used on fields inside @Embedded classes.
  * See the [http://code.google.com/p/objectify-appengine/wiki/IntroductionToObjectify#@Serialized @Serialized] documentation.

== @javax.persistence.PostLoad ==
  * Placed on any method that either takes no parameters or a single parameter of type Entity.
  * Called after the POJO is populated with data.
  * Can be specified on multiple methods in this class or any base class.
  * Methods are called in declared order, with superclass methods first.

== @javax.persistence.PrePersist ==
  * Placed on any method that either takes no parameters or a single parameter of type Entity.
  * Called before the POJO is written to the datastore Entity.
  * Can be specified on multiple methods in this class or any base class.
  * Methods are called in declared order, with superclass methods first.