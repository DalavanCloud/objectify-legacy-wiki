#summary The annotations used by Objectify

= Example =
{{{
@Entity(name="Emp")
class Employee {
   @Id long id;
   @Parent OKey<Company> employer;

   @Unindexed int vacationDays;

   // field getting renamed
   @OldName("boss") OKey<Employee> manager;

   String firstName;
   String lastName;

   // we used to store fullName, now we store first and last separately
   @OldName("fullName") public void oldWay(String fullName)
   {
       String[] split = fullName.split(" ");
       firstName = split[0];
       lastName = split[1];
   }
}
}}}

= The Annotations =

== @Entity ==
  * Placed on a class
  * Optionally specifies the name of a kind, ie {{{@Entity(name="Person")}}}

== @Id ==
  * Must be placed on one and only one field of an @Entity class
  * Field must be type {{{Long}}}, {{{long}}}, or {{{String}}}
  * If used on type {{{Long}}}, null values will be autogenerated on put()

== @Unindexed ==
  * Placed on a field
  * Causes the field to be stored with {{{Entity.setUnindexedProperty()}}}
  * More efficient writes, but you cannot query on the field

== @OldName ==
  * Placed on a field or method
  * Requires one value, the name of a property in the datastore to load into the field.
  * Example:  {{{@OldName("whatThisFieldUsedToBeCalled")}}}
  * Causes the field to be loaded from an alternate name in the underlying datastore
  * If placed on a method that takes a single parameter, the method will be called with the datastore value
  * If there is a load conflict with the true name of field, an IllegalStateException will be thrown.

== @Parent ==
  * Placed on at most one field of type {{{OKey}}}
  * Defines the entity group parent for an entity